clear();
setwd("/Users/peterjwagner/Documents/RevBayes_Projects");	#CHANGE THIS TO THE FOLDER IN WHICH YOU HAVE REVBAYES SCRIPTS & DATA!!!
### This director needs three subdirectories (folders):
#     RevBayes_Projects/scripts (additional RevBayes routines that will be used)
#     RevBayes_Projects/data (holds data matrices & taxonomic information)
#     RevBayes_Projects/output (where trees & logs will be sent)
source("scripts/Imperio_Default_Settings.Rev");

###############################################################################
# This is (these are) the nexus file(s) that you are using for this analysis  #
#     Make sure that filenames & directories are correct!!!
###############################################################################
filenames <- v("data/Crassatellidae_Matrix_2_States.nex");
partition_chars <- v(28);
partition_states <- v(2);
partition_ordering <- v("unordered");
coding_bias <- v("variable");	## prepare for ascertainment bias in binary characters; 'all': invariant & autapomorphies present; 'variable': all vary & autapomorphies present; 'informative': all vary & no autapomorphies.
max_age <- 60.6;						# used if big_bang==TRUE;

outgroup = clade();
ingroup = clade("Crassatella_vadosa","Crassatella_carolinensis","Crassatella_hodgei","Crassatella_tumidula","Crassatella_aquiana","Spissatella_trailli","Scambula_perplana","Bathytormus_pteropsis","Bathytormus_alaeformis","Bathytormus_protextus","Bathytormus_clarkensis");
among_char_var <- "uniform"		# enter "gamma" or "lognormal"
clock_model <- "strict";	# enter "strict" for strict clock, or "lognormal" for relaxed clock with lognormal variation; we'll add "dirichlet eventually;

############################################################################
#                  Get basic information about the clade                   #
############################################################################
n_data_subsets <- filenames.size();
taxa <- readTaxonData(file="data/crassatellidae_fossil_intervals.tsv");
n_taxa <- taxa.size();
n_branches <- (2 * n_taxa) - 2;

############################################################################
# Set up appropriate parameters for speciation, extinction & sampling.     #
#      We also set up the tree search here.                                #
############################################################################
moves = VectorMoves();
source("scripts/Accersi_Crassatellidae_FBD_Parameterization.Rev");

############################################################################
# Set up appropriate Q-matrices for the partitions
#   as well as the among-character and among-branch
#   rate variation models
#  (Again, make sure that the directory is OK)
############################################################################
source("scripts/Accersi_Parameters_for_Analysis_Partitioned_by_States_and_Ordering_and_Class.Rev");

############################################################################
# Wrap it all into your model
############################################################################
mymodel = model(tau);		# tau should have FBD & character evolution models attached to it

############################################################################
# Add monitors & stone your data
#  (Again, make sure that the source directory is OK)
# NOTE: the program saves trees once every printgen generations; so, the
#   lower the number, the more trees you save.
############################################################################
monitors = VectorMonitors();

cats=20;              # Number of stepping stones; each will reduce the "weight" of the likelihood by ~1/cats)
burnin_gens=10000;    # Number of generations for the burnin pre-analysis (to tune parameters).
tuning_int=200;       # Frequency at which burnin analysis will tune parameters (in generations).
running_gens=100000;	# Number of generations for the real analysis; the bigger the analysis, the more you usually need.
sampleFreq=1000;      # Frequency of stepping stone samples

output_file = "output/crassatellidae_" + among_char_var + "_char_variation_" + clock_model;
if (clock_model!="strict")	output_file = output_file + "_relaxed";
output_file = output_file + "_clock";
if (rate_partitions.size()>1)   output_file = output_file + "_" + "_char_rate_partitions_";
if (bins>1)	output_file = output_file + "_" + bins + "_bin_skyline";
filename1 = output_file + "_stepping_stoned.log";

monitors.append(mnModel(filename=filename1, printgen=10));
monitors.append(mnFile(tau,filename=filename1, printgen=10,separator=TAB,tau));

filename2 = output_file + "_stepping_stone_test.out";
update = "Writing to: " + filename2;
print(update);

pow_p = powerPosterior(mymodel, moves, monitors, filename=filename2, cats=cats, sampleFreq=sampleFreq);  ##Set up your power posterior from everything in completed analysis. Create output for power posterior in quotes
pow_p.burnin(generations=burnin_gens,tuningInterval=tuning_int);			##Set up power posterior burn in. Should likely be logner than 10000
pow_p.run(generations=running_gens);

#######let run#################

ss = steppingStoneSampler(file=filename2, powerColumnName="power", likelihoodColumnName="likelihood");
ps = pathSampler(file=filename2, powerColumnName="power", likelihoodColumnName="likelihood");

ss.marginal();   ##Calculate and display marginal likelihood of stepping stone simulations
ps.marginal();   ##Calculate and display marginal likelihood of stepping stone simulations
